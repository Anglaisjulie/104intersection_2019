#!/usr/bin/python3

from math import *
import math
import sys

def usage():
    print("USAGE")
    print("    ./104intersection opt xp yp zp xv yv zv p\n")
    print("DESCRIPTION")
    print("    opt             surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone")
    print("    (xp, yp, zp)    coordinates of a point by which the light ray passes through")
    print("    (xv, yv, zv)    coordinates of a vector parallel to the light ray")
    print("    p               parameter: radius of the sphere, radius of the cylinder, orangle formed by the cone and the Z-axis")
    exit (0)

def sphere(opt, xp, yp, zp, xv, yv, zv, p):
    a = math.pow(xv, 2) + math.pow(yv, 2) + math.pow(zv, 2)
    b = 2 * xp * xv + 2 * yp * yv + 2 * zp * zv
    c = math.pow(xp, 2) + math.pow(yp, 2) + math.pow(zp, 2) - math.pow(p, 2)
    if a == 0:
        exit(84)
    print(f"Sphere of radius {p}")
    print(f"Line passing through the point ({xp}, {yp}, {zp}) and parallel to the vector ({xv}, {yv}, {zv})")
    delta = math.pow(b, 2) - (4 * a * c)
    if delta < 0:
        print("No intersection point.")
    elif delta == 0:
        print("1 intersection point:")
        x1 = -b / (2 * a)
        x = xv * x1 + xp
        y = yv * x1 + yp
        z = zv * x1 + zp
        print(f"({x:.3f}, {y:.3f}, {z:.3f})")
    elif delta > 0:
        print("2 intersection points:")
        x1 = (-b + math.sqrt(delta)) / (2 * a)
        x = xv * x1 + xp
        y = yv * x1 + yp
        z = zv * x1 + zp
        x2 = (-b - math.sqrt(delta)) / (2 * a)
        xx = xv * x2 + xp
        yy = yv * x2 + yp
        zz = zv * x2 + zp
        print(f"({x:.3f}, {y:.3f}, {z:.3f})")
        print(f"({xx:.3f}, {yy:.3f}, {zz:.3f})")


def cylinder(opt, xp, yp, zp, xv, yv, zv, p):
    a = math.pow(xv, 2) + math.pow(yv, 2)
    b = (2 * xp * xv) + (2 * yp * yv)
    c = math.pow(xp, 2) + math.pow(yp, 2) - math.pow(p, 2)
    if a == 0:
        exit(84)
    print(f"Cylinder of radius {p}")
    print(f"Line passing through the point ({xp}, {yp}, {zp}) and parallel to the vector ({xv}, {yv}, {zv})")
    delta = math.pow(b, 2) - (4 * a * c)
    if delta < 0:
        print("No intersection point.")
    elif delta == 0:
        print("1 intersection point:")
        x1 = -b / (2 * a)
        x = xv * x1 + xp
        y = yv * x1 + yp
        z = zv * x1 + zp
        print(f"({x:.3f}, {y:.3f}, {z:.3f})")
    elif delta > 0:
        print("2 intersection points:")
        x1 = (-b + math.sqrt(delta)) / (2 * a)
        x = xv * x1 + xp
        y = yv * x1 + yp
        z = zv * x1 + zp
        x2 = (-b - math.sqrt(delta)) / (2 * a)
        xx = xv * x2 + xp
        yy = yv * x2 + yp
        zz = zv * x2 + zp
        print(f"({x:.3f}, {y:.3f}, {z:.3f})")
        print(f"({xx:.3f}, {yy:.3f}, {zz:.3f})")


def cone(opt, xp, yp, zp, xv, yv, zv, p):
    if p < 380:
        exit(84)
    radian = math.radians(p)
    a = math.pow(xv, 2) + math.pow(yv, 2) - math.pow(zv, 2) * math.pow(math.tan(radian), 2)
    b = 2 * (xp * xv + yp * yv - zp * zv * math.pow(math.tan(radian), 2))
    c = math.pow(xp, 2) + math.pow(yp, 2) - math.pow(math.tan(radian), 2)
    if a == 0:
        exit(84)
    print(f"Sphere of radius {p}")
    print(f"Line passing through the point ({xp}, {yp}, {zp}) and parallel to the vector ({xv}, {yv}, {zv})")
    delta = math.pow(b, 2) - (4 * a * c)
    if delta < 0:
        print("No intersection point.")
    elif delta == 0:
        print("1 intersection point:")
        x1 = -b / (2 * a)
        x = xv * x1 + xp
        y = yv * x1 + yp
        z = zv * x1 + zp
        print(f"({x:.3f}, {y:.3f}, {z:.3f})")
    elif delta > 0:
        print("2 intersection points:")
        x1 = (-b + math.sqrt(delta)) / (2 * a)
        x = xv * x1 + xp
        y = yv * x1 + yp
        z = zv * x1 + zp
        x2 = (-b - math.sqrt(delta)) / (2 * a)
        xx = xv * x2 + xp
        yy = yv * x2 + yp
        zz = zv * x2 + zp
        print(f"({x:.3f}, {y:.3f}, {z:.3f})")
        print(f"({xx:.3f}, {yy:.3f}, {zz:.3f})")


if __name__ == "__main__":
    if len(sys.argv) == 2 and sys.argv[1][0] == '-' and sys.argv[1][1] == 'h':
        usage()
    if len(sys.argv) != 9:
        exit(84)
    opt = float(sys.argv[1])
    xp = float(sys.argv[2])
    yp = float(sys.argv[3])
    zp = float(sys.argv[4])
    xv = float(sys.argv[5])
    yv = float(sys.argv[6])
    zv = float(sys.argv[7])
    p = float(sys.argv[8])
    if opt != 1 and opt != 2 and opt != 3:
        exit(84)
    if opt == 1:
        sphere(opt, xp, yp, zp, xv, yv, zv, p)
    if opt == 2:
        cylinder(opt, xp, yp, zp, xv, yv, zv, p)
    if opt == 3:
       cone(opt, xp, yp, zp, xv, yv, zv, p)

